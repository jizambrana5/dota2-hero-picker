// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/jizambrana5/dota2-hero-picker/internal/pkg/domain"
	"sync"
)

// HeroServiceMock is a mock implementation of rest.HeroService.
//
//	func TestSomethingThatUsesHeroService(t *testing.T) {
//
//		// make and configure a mocked rest.HeroService
//		mockedHeroService := &HeroServiceMock{
//			GetAllHeroesFunc: func(ctx context.Context) ([]domain.Hero, error) {
//				panic("mock out the GetAllHeroes method")
//			},
//			GetDataSetFunc: func(ctx context.Context) ([][]string, error) {
//				panic("mock out the GetDataSet method")
//			},
//			GetFullHeroInfoFunc: func(ctx context.Context, heroID string) (domain.FullHeroInfo, error) {
//				panic("mock out the GetFullHeroInfo method")
//			},
//			GetHeroFunc: func(ctx context.Context, id string) (domain.Hero, error) {
//				panic("mock out the GetHero method")
//			},
//			GetHeroBenchmarkFunc: func(ctx context.Context, heroID string) (interface{}, error) {
//				panic("mock out the GetHeroBenchmark method")
//			},
//			GetHeroSuggestionFunc: func(ctx context.Context, preferences domain.UserPreferences) ([]domain.Hero, error) {
//				panic("mock out the GetHeroSuggestion method")
//			},
//			SaveHeroesFunc: func(ctx context.Context) error {
//				panic("mock out the SaveHeroes method")
//			},
//		}
//
//		// use mockedHeroService in code that requires rest.HeroService
//		// and then make assertions.
//
//	}
type HeroServiceMock struct {
	// GetAllHeroesFunc mocks the GetAllHeroes method.
	GetAllHeroesFunc func(ctx context.Context) ([]domain.Hero, error)

	// GetDataSetFunc mocks the GetDataSet method.
	GetDataSetFunc func(ctx context.Context) ([][]string, error)

	// GetFullHeroInfoFunc mocks the GetFullHeroInfo method.
	GetFullHeroInfoFunc func(ctx context.Context, heroID string) (domain.FullHeroInfo, error)

	// GetHeroFunc mocks the GetHero method.
	GetHeroFunc func(ctx context.Context, id string) (domain.Hero, error)

	// GetHeroBenchmarkFunc mocks the GetHeroBenchmark method.
	GetHeroBenchmarkFunc func(ctx context.Context, heroID string) (interface{}, error)

	// GetHeroSuggestionFunc mocks the GetHeroSuggestion method.
	GetHeroSuggestionFunc func(ctx context.Context, preferences domain.UserPreferences) ([]domain.Hero, error)

	// SaveHeroesFunc mocks the SaveHeroes method.
	SaveHeroesFunc func(ctx context.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// GetAllHeroes holds details about calls to the GetAllHeroes method.
		GetAllHeroes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetDataSet holds details about calls to the GetDataSet method.
		GetDataSet []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetFullHeroInfo holds details about calls to the GetFullHeroInfo method.
		GetFullHeroInfo []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// HeroID is the heroID argument value.
			HeroID string
		}
		// GetHero holds details about calls to the GetHero method.
		GetHero []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// GetHeroBenchmark holds details about calls to the GetHeroBenchmark method.
		GetHeroBenchmark []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// HeroID is the heroID argument value.
			HeroID string
		}
		// GetHeroSuggestion holds details about calls to the GetHeroSuggestion method.
		GetHeroSuggestion []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Preferences is the preferences argument value.
			Preferences domain.UserPreferences
		}
		// SaveHeroes holds details about calls to the SaveHeroes method.
		SaveHeroes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockGetAllHeroes      sync.RWMutex
	lockGetDataSet        sync.RWMutex
	lockGetFullHeroInfo   sync.RWMutex
	lockGetHero           sync.RWMutex
	lockGetHeroBenchmark  sync.RWMutex
	lockGetHeroSuggestion sync.RWMutex
	lockSaveHeroes        sync.RWMutex
}

// GetAllHeroes calls GetAllHeroesFunc.
func (mock *HeroServiceMock) GetAllHeroes(ctx context.Context) ([]domain.Hero, error) {
	if mock.GetAllHeroesFunc == nil {
		panic("HeroServiceMock.GetAllHeroesFunc: method is nil but HeroService.GetAllHeroes was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetAllHeroes.Lock()
	mock.calls.GetAllHeroes = append(mock.calls.GetAllHeroes, callInfo)
	mock.lockGetAllHeroes.Unlock()
	return mock.GetAllHeroesFunc(ctx)
}

// GetAllHeroesCalls gets all the calls that were made to GetAllHeroes.
// Check the length with:
//
//	len(mockedHeroService.GetAllHeroesCalls())
func (mock *HeroServiceMock) GetAllHeroesCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetAllHeroes.RLock()
	calls = mock.calls.GetAllHeroes
	mock.lockGetAllHeroes.RUnlock()
	return calls
}

// GetDataSet calls GetDataSetFunc.
func (mock *HeroServiceMock) GetDataSet(ctx context.Context) ([][]string, error) {
	if mock.GetDataSetFunc == nil {
		panic("HeroServiceMock.GetDataSetFunc: method is nil but HeroService.GetDataSet was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetDataSet.Lock()
	mock.calls.GetDataSet = append(mock.calls.GetDataSet, callInfo)
	mock.lockGetDataSet.Unlock()
	return mock.GetDataSetFunc(ctx)
}

// GetDataSetCalls gets all the calls that were made to GetDataSet.
// Check the length with:
//
//	len(mockedHeroService.GetDataSetCalls())
func (mock *HeroServiceMock) GetDataSetCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetDataSet.RLock()
	calls = mock.calls.GetDataSet
	mock.lockGetDataSet.RUnlock()
	return calls
}

// GetFullHeroInfo calls GetFullHeroInfoFunc.
func (mock *HeroServiceMock) GetFullHeroInfo(ctx context.Context, heroID string) (domain.FullHeroInfo, error) {
	if mock.GetFullHeroInfoFunc == nil {
		panic("HeroServiceMock.GetFullHeroInfoFunc: method is nil but HeroService.GetFullHeroInfo was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		HeroID string
	}{
		Ctx:    ctx,
		HeroID: heroID,
	}
	mock.lockGetFullHeroInfo.Lock()
	mock.calls.GetFullHeroInfo = append(mock.calls.GetFullHeroInfo, callInfo)
	mock.lockGetFullHeroInfo.Unlock()
	return mock.GetFullHeroInfoFunc(ctx, heroID)
}

// GetFullHeroInfoCalls gets all the calls that were made to GetFullHeroInfo.
// Check the length with:
//
//	len(mockedHeroService.GetFullHeroInfoCalls())
func (mock *HeroServiceMock) GetFullHeroInfoCalls() []struct {
	Ctx    context.Context
	HeroID string
} {
	var calls []struct {
		Ctx    context.Context
		HeroID string
	}
	mock.lockGetFullHeroInfo.RLock()
	calls = mock.calls.GetFullHeroInfo
	mock.lockGetFullHeroInfo.RUnlock()
	return calls
}

// GetHero calls GetHeroFunc.
func (mock *HeroServiceMock) GetHero(ctx context.Context, id string) (domain.Hero, error) {
	if mock.GetHeroFunc == nil {
		panic("HeroServiceMock.GetHeroFunc: method is nil but HeroService.GetHero was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetHero.Lock()
	mock.calls.GetHero = append(mock.calls.GetHero, callInfo)
	mock.lockGetHero.Unlock()
	return mock.GetHeroFunc(ctx, id)
}

// GetHeroCalls gets all the calls that were made to GetHero.
// Check the length with:
//
//	len(mockedHeroService.GetHeroCalls())
func (mock *HeroServiceMock) GetHeroCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockGetHero.RLock()
	calls = mock.calls.GetHero
	mock.lockGetHero.RUnlock()
	return calls
}

// GetHeroBenchmark calls GetHeroBenchmarkFunc.
func (mock *HeroServiceMock) GetHeroBenchmark(ctx context.Context, heroID string) (interface{}, error) {
	if mock.GetHeroBenchmarkFunc == nil {
		panic("HeroServiceMock.GetHeroBenchmarkFunc: method is nil but HeroService.GetHeroBenchmark was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		HeroID string
	}{
		Ctx:    ctx,
		HeroID: heroID,
	}
	mock.lockGetHeroBenchmark.Lock()
	mock.calls.GetHeroBenchmark = append(mock.calls.GetHeroBenchmark, callInfo)
	mock.lockGetHeroBenchmark.Unlock()
	return mock.GetHeroBenchmarkFunc(ctx, heroID)
}

// GetHeroBenchmarkCalls gets all the calls that were made to GetHeroBenchmark.
// Check the length with:
//
//	len(mockedHeroService.GetHeroBenchmarkCalls())
func (mock *HeroServiceMock) GetHeroBenchmarkCalls() []struct {
	Ctx    context.Context
	HeroID string
} {
	var calls []struct {
		Ctx    context.Context
		HeroID string
	}
	mock.lockGetHeroBenchmark.RLock()
	calls = mock.calls.GetHeroBenchmark
	mock.lockGetHeroBenchmark.RUnlock()
	return calls
}

// GetHeroSuggestion calls GetHeroSuggestionFunc.
func (mock *HeroServiceMock) GetHeroSuggestion(ctx context.Context, preferences domain.UserPreferences) ([]domain.Hero, error) {
	if mock.GetHeroSuggestionFunc == nil {
		panic("HeroServiceMock.GetHeroSuggestionFunc: method is nil but HeroService.GetHeroSuggestion was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Preferences domain.UserPreferences
	}{
		Ctx:         ctx,
		Preferences: preferences,
	}
	mock.lockGetHeroSuggestion.Lock()
	mock.calls.GetHeroSuggestion = append(mock.calls.GetHeroSuggestion, callInfo)
	mock.lockGetHeroSuggestion.Unlock()
	return mock.GetHeroSuggestionFunc(ctx, preferences)
}

// GetHeroSuggestionCalls gets all the calls that were made to GetHeroSuggestion.
// Check the length with:
//
//	len(mockedHeroService.GetHeroSuggestionCalls())
func (mock *HeroServiceMock) GetHeroSuggestionCalls() []struct {
	Ctx         context.Context
	Preferences domain.UserPreferences
} {
	var calls []struct {
		Ctx         context.Context
		Preferences domain.UserPreferences
	}
	mock.lockGetHeroSuggestion.RLock()
	calls = mock.calls.GetHeroSuggestion
	mock.lockGetHeroSuggestion.RUnlock()
	return calls
}

// SaveHeroes calls SaveHeroesFunc.
func (mock *HeroServiceMock) SaveHeroes(ctx context.Context) error {
	if mock.SaveHeroesFunc == nil {
		panic("HeroServiceMock.SaveHeroesFunc: method is nil but HeroService.SaveHeroes was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockSaveHeroes.Lock()
	mock.calls.SaveHeroes = append(mock.calls.SaveHeroes, callInfo)
	mock.lockSaveHeroes.Unlock()
	return mock.SaveHeroesFunc(ctx)
}

// SaveHeroesCalls gets all the calls that were made to SaveHeroes.
// Check the length with:
//
//	len(mockedHeroService.SaveHeroesCalls())
func (mock *HeroServiceMock) SaveHeroesCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockSaveHeroes.RLock()
	calls = mock.calls.SaveHeroes
	mock.lockSaveHeroes.RUnlock()
	return calls
}
